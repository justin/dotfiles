## Git Workflow

Version control isn't just a place to store your code or a backup system. It is a journal that explains *why* your code exists in a given state. This information is useful when it comes time to figure out why a bug was introduced, and more importantly, how to resolve it.

Our version control workflow boils down to three simple concepts:

1. We keep a linear history `main` so that it is easy to use [git bisect](https://git-scm.com/docs/git-bisect) to debug crashes and other bugs over time.
2. A commit should be dedicated to a single Jira ticket. If you fix a bug unrelated to the ticket, it should be a separate commit. This allows us to easily revert bad changes without extra hassle.
3. We follow the standard practice for writing [commit messages](https://commit.style/).

A good commit message is just as important as the code change. Software is a collaborative endeavor. Writing a commit message that doesn't *explain* a change isn't helpful when you or your teammates have to dive into the history and understand a specific change in the code base.

- The first line of a commit message serves as a summary and should be limited to 50 characters. It is also pulled into our release notes for each TestFlight build. It should be capitalized and omit any trailing punctuation.
- Subsequent lines should explain why the change is necessary, how you addressed it, and any potential side effects it may introduce.

> "The difference between a tolerable programmer and a great programmer is not how many programming languages they know, and it's not whether they prefer Python or Java. **It's whether they can communicate their ideas…** By writing clear comments and technical specs, they let other programmers understand their code, which means other programmers can use and work with their code instead of rewriting it. Absent this, their code is worthless. By writing clear technical documentation for end users, they allow people to figure out what their code is supposed to do, which is the only way those users can see the value in their code." ﹣ [Joel Spolsky](https://www.joelonsoftware.com/2005/01/02/advice-for-computer-science-college-students/)

### Pull Requests & Code Reviews

When you have a pull request ready for code review, we follow the [Thoughtbot](https://github.com/thoughtbot/guides/tree/main/git) guide for pull requests and code review. This is copied verbatim.

Create a local feature branch based off `main`.

```zsh
git checkout main
git pull
git checkout -b jww/<branch-name>
```

Rebase frequently to incorporate upstream changes.

```zsh
git fetch origin
git rebase origin/main
```

Resolve conflicts. When feature is complete and tests pass, stage the changes.

```zsh
git add --all
```

When you've staged the changes, commit them.

```zsh
git status
git commit --verbose
```

Write a [good commit message](https://commit.style/). Example format:

```other
[ENG-00] Present-tense summary under 50 characters

* More information about commit (under 72 characters).
* More information about commit (under 72 characters).

Fixes ENG-00
```

If you've created more than one commit, [use `git rebase` interactively](https://help.github.com/articles/about-git-rebase/) to squash them into cohesive commits with good messages:

```zsh
git rebase -i origin/main
```

Share your branch.

```zsh
git push origin <branch name>
```

Generate a new pull request. If you wrote good commit messages, you can easily copy / paste them into the description of the pull request so it's easier to write and explain your intent to the code reviewer.

