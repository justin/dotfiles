# Syntax reference:
# set -n <option> <value>  # Set an option for the current session
# set -w <option> <value>  # Set an option for the current window
# set -g <option> <value>  # Set a global option
# bind <key> <command>     # Bind a key to a command with prefix
# bind -n <key> <command>  # Bind a key without prefix
# bind -T <table> <key> <command>  # Bind a key in a specific key table

set -g default-command $SHELL
set -g default-shell $SHELL

# Remove all keybindings
unbind -T root -aq
unbind -T prefix -aq
unbind -T nested -aq
unbind -T popup -aq
unbind -T copy-mode -aq
unbind -T copy-mode-vi -aq

# better Unicode / Nerd-Font support in modern terminals
set -g default-terminal ${TERM}

# Set prefix key to Option-w
set -g prefix M-w
bind M-w send-prefix

# Start window numbering at 1 instead of 0
set -g base-index 1

# Start pane numbering at 1 instead of 0
setw -g pane-base-index 1

# Automatically renumber windows after closing one
set -g renumber-windows on

# Set history file location
set -g history-file ~/.local/share/tmux/history

# Increase scrollback buffer size for each pane
set -g history-limit 102400

# Reduce delay after pressing ESC (useful for vim users)
set -g escape-time 10

# Enable mouse support for scrolling, pane selection, and window switching
setw -g mouse on

###################################################
# Session Management
###################################################

bind : command-prompt

# Rename the current session
bind '$' command-prompt -I "#S" { rename-session "%%" }

# Detach from the current session
bind d detach

# Reload config
bind r {
    source-file ~/.config/tmux/tmux.conf
    display "Config reloaded!"
}

# Toggle the bell and activity monitoring for the current window
bind m {
  set -w monitor-bell
  set -w monitor-activity
  display 'window mute #{?#{monitor-bell},off,on}'
}

####################################################
# Pane Management
###################################################

# split panes using | and -, make sure they open in the same path
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Use Alt-arrow keys without prefix key to switch panes
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# Kill the current pane
bind x kill-pane

# Zoom in/out of panes
bind -n M-z resize-pane -Z

# Detect if the current pane is running vim, nvim, or view
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# Detect if the current pane is running fzf
is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"

# Combine the checks for vim and fzf
# This will be used to determine if we should send keys to vim/fzf or switch panes
# If either vim or fzf is running, we will send the keys to it
is_vim_or_fzf="$is_vim || $is_fzf"

# Smart pane switching with Ctrl-h/j/k/l: send keys to vim if active, otherwise switch pane
bind-key -n 'C-h' if-shell "$is_vim_or_fzf" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim_or_fzf" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim_or_fzf" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim_or_fzf" 'send-keys C-l'  'select-pane -R'
# Smart pane switching with Ctrl-\: send keys to vim if active, otherwise switch pane
bind-key -n C-\   if-shell  "$is_vim"  "send-keys C-\\"  "select-pane -l"

# Enable pane navigation in copy-mode-vi with Ctrl-h/j/k/l and Ctrl-\\
bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

###################################################
# Window Management
###################################################

# Create a new window in the current directory
bind c new-window -c '#{pane_current_path}' -a -t '{next}'
bind -n M-c new-window -c '#{pane_current_path}' -a -t '{next}'

# Rename the current window
bind ',' command-prompt -I "#W" { rename-window "%%" }

# Move to the next window
bind -n M-n next-window

# Swap the current window with the next one
bind -n M-N swap-window -d -t '{next}'

# Move to the previous window
bind -n M-p previous-window

# Swap the current window with the previous one
bind -n M-P swap-window -d -t '{previous}'

# Kill the current window
bind q confirm kill-window

# Convenience keybindings for window navigation (Alt-1 to Alt-9)
bind -n M-1 select-window -t :=1
bind -n M-2 select-window -t :=2
bind -n M-3 select-window -t :=3
bind -n M-4 select-window -t :=4
bind -n M-5 select-window -t :=5
bind -n M-6 select-window -t :=6
bind -n M-7 select-window -t :=7
bind -n M-8 select-window -t :=8
bind -n M-9 select-window -t :=9

###################################################
# Copy & Paste
###################################################

# Enable vi-style keybindings in copy-mode
set -g mode-keys vi

# Set the copy-paste buffer to use the system clipboard
# This requires xclip or xsel to be installed on Linux, or pbcopy/pbpaste on macOS
set -g set-clipboard on

# Bind Space to copy-mode
unbind -T prefix Space
bind -T prefix Space copy-mode

# Bind Escape to exit copy-mode
bind -T copy-mode-vi Escape send-keys -X cancel

# Bind arrow keys in copy-mode-vi to move the cursor
bind -T copy-mode-vi Up     send -X cursor-up
bind -T copy-mode-vi Down   send -X cursor-down
bind -T copy-mode-vi Left   send -X cursor-left
bind -T copy-mode-vi Right  send -X cursor-right

# Bind v and Space to start selection in copy-mode-vi
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi Space  send -X begin-selection

# Bind y and Enter to copy the selection in copy-mode-vi.
bind -T copy-mode-vi y      send -X copy-selection-and-cancel
bind -T copy-mode-vi Enter  send -X copy-selection-and-cancel

# Bind p to paste the copied text.
bind -n M-p paste-buffer -p

###################################################
# Mouse Support
###################################################

# Restore unbound mouse commands
bind -T root MouseDown1Pane { select-pane -t =; send -M }
bind -n MouseDown1Status select-window -t =
bind -n MouseDown3Pane   if -F -t= "#{mouse_any_flag}" { select-pane -t=; send -M } { select-pane -mt= }
bind -n MouseDrag1Pane   if -F -t= "#{mouse_any_flag}" { if -Ft= "#{pane_in_mode}" { copy-mode -M } { send -M } } { copy-mode -M }
bind -n MouseDrag1Border resize-pane -M
bind -n WheelUpPane      if -F -t= "#{mouse_any_flag}" { send -M } { if -Ft= "#{pane_in_mode}" { send -M } { copy-mode -et= } }
bind -n WheelUpStatus    previous-window
bind -n WheelDownStatus  next-window

# Restores unbound copy-mode-vi mouse commands
bind -T copy-mode-vi MouseDown1Pane    select-pane
bind -T copy-mode-vi MouseDrag1Pane    { select-pane; send -X begin-selection }
bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-no-clear
bind -T copy-mode-vi WheelUpPane       { select-pane; send -X -N 5 scroll-up }
bind -T copy-mode-vi WheelDownPane     { select-pane; send -X -N 5 scroll-down }
bind -T copy-mode-vi DoubleClick1Pane  { select-pane; send -X select-word }
bind -T copy-mode-vi TripleClick1Pane  { select-pane; send -X select-line }

###################################################
# Status Bar Styling (CLI theme colors)
#
# colour0   = black
# colour1   = red
# colour2   = green
# colour3   = yellow
# colour4   = blue
# colour5   = magenta
# colour6   = cyan
# colour7   = white (light gray)
# colour8   = bright black (gray)
# colour9   = bright red
# colour10  = bright green
# colour11  = bright yellow
# colour12  = bright blue
# colour13  = bright magenta (pink)
# colour14  = bright cyan
# colour15  = bright white
#
###################################################

# Status bar background and foreground
set -g status-style "bg=colour13,fg=colour0"

# Left side: session name in green, on pink background
set -g status-left-length 40
set -g status-left "#[fg=colour15,bg=colour0,bold] #S #[fg=colour0,bg=colour13,nobold,nounderscore,noitalics]"

# Right side: date, time, host in yellow, on pink background
set -g status-right-length 80
set -g status-right "#[fg=colour15,bg=colour0] #H "

# Window status: inactive windows in grey, active in cyan, both on pink background
set-window-option -g window-status-format "#[fg=colour0,bg=colour13] #I:#W "
set-window-option -g window-status-current-format " #[fg=colour13,bg=colour0,bold] #I:#W #[fg=colour0,bg=colour13,nobold]"

# Window separator
set -g window-status-separator ""

# Pane border colors
set -g pane-border-style "fg=colour0"
set -g pane-border-lines "heavy"
set -g pane-active-border-style "fg=colour0"
set -g window-active-style 'bg=terminal'
set -g window-style 'bg=terminal'

# Message styling (for prompts, etc.)
set -g message-style "bg=colour1,fg=colour15,bold"

# Command prompt styling
set -g message-command-style "bg=colour2,fg=colour13"

